package org.example.View;

import org.example.Model.Domain.GroupChatMessage;
import org.example.Model.Domain.Message;
import org.example.Model.Domain.SingleChatMessage;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Objects;

public class ChatWindow extends JLabel {
    //Êé•Êî∂ÊñπÂêçÁß∞
    private JLabel receiverNameLabel;
    //Êé•Êî∂ÊñπÁôªÈôÜÁä∂ÊÄÅ
    JLabel statusLabel;
    //ËÅäÂ§©Ê∂àÊÅØÈ°µÈù¢‰∏ªÈ¢ò
    private JPanel chatPanel;
    //ËæìÂÖ•Ê°Ü
    private JTextField inputField;
    //ÂèëÈÄÅÊåâÈíÆ
    JButton sendButton;
    //ËÅäÂ§©Ê°Ü
    public JScrollPane scrollPane;
    //Ë°®ÊÉÖÊåâÈíÆ
    private JButton emojiButton;
    //Ë°®ÊÉÖËèúÂçï
    private JPopupMenu emojiMenu;
    //ÁõëÂê¨Âô®
    private ChatMessageListener listener;

    private final Integer senderId;
    private final Integer receiverId;
    //Â§¥ÂÉè
    private BufferedImage senderAvatar;
    private BufferedImage receiverAvatar;
    //Êñá‰ª∂
    JButton fileButton;
    //Êé•Êî∂‰∫∫ÂêçÁß∞
    private String receiverName;

    /**
     * @param senderId   ÂèëÈÄÅÊñπID
     * @param receiverId Êé•Êî∂ÊñπID
     */
    public ChatWindow(int senderId, int receiverId, String receiverName) {
        this.senderId = senderId;
        this.receiverId = receiverId;
        this.receiverName = receiverName;
        InitLayout();

    }

    private void InitLayout() {
        //System.out.println("Êñ∞Áæ§ËÅä"+receiverName+"ÂàùÂßãÂåñ‰∏≠");
        setPreferredSize(new Dimension(615, 650));
        setLayout(new BorderLayout());

        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        receiverNameLabel = new JLabel();
        statusLabel = new JLabel();


        JPanel statusPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        statusPanel.add(statusLabel);

        headerPanel.add(receiverNameLabel, BorderLayout.WEST);
        headerPanel.add(statusPanel, BorderLayout.CENTER);

        add(headerPanel, BorderLayout.NORTH);

        // ËÅäÂ§©Ê∂àÊÅØÈù¢Êùø
        chatPanel = new JPanel();
        chatPanel.setLayout(new BoxLayout(chatPanel, BoxLayout.Y_AXIS));
        chatPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        chatPanel.add(Box.createVerticalGlue());

        // ÊªöÂä®Èù¢Êùø
        scrollPane = new JScrollPane(chatPanel);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        add(scrollPane, BorderLayout.CENTER);

        // ËæìÂÖ•Èù¢Êùø
        JPanel inputPanel = new JPanel(new BorderLayout());
        inputField = new JTextField();
        sendButton = new JButton("ÂèëÈÄÅ");
        fileButton = new JButton("ÂèëÈÄÅÊñá‰ª∂/ÂõæÁâá/ËßÜÈ¢ë");
        emojiButton = new JButton("üòÄ");

        // ÂàõÂª∫ÊåâÈíÆÈù¢Êùø
        JPanel buttonPanel = new JPanel(new GridLayout(1, 2));
        buttonPanel.add(emojiButton);
        buttonPanel.add(sendButton);

        inputPanel.add(buttonPanel, BorderLayout.EAST);
        inputPanel.add(inputField, BorderLayout.CENTER);
        inputPanel.add(fileButton, BorderLayout.SOUTH);
        add(inputPanel, BorderLayout.SOUTH);


        // ÂàùÂßãÂåñË°®ÊÉÖËèúÂçï
        initEmojiMenu();

        addListener();
        System.out.println("ÂàùÂßãÂåñÂÆåÊàê");
    }

    private void initEmojiMenu() {
        emojiMenu = new JPopupMenu();
        JPanel emojiPanel = new JPanel(new GridLayout(0, 10));

        String[] emojis = {
                "üòÄ", "üòÅ", "üòÇ", "ü§£", "üòÉ", "üòÑ", "üòÖ", "üòÜ", "üòâ", "üòä",
                "üòã", "üòé", "üòç", "üòò", "üòó", "üòô", "üòö", "üôÇ", "ü§ó", "ü§î",
                "ü§®", "üòê", "üòë", "üò∂", "üôÑ", "üòè", "üò£", "üò•", "üòÆ", "ü§ê",
                "üòØ", "üò™", "üò´", "üò¥", "üòå", "üòõ", "üòú", "üòù", "ü§§", "üòí",
                "üòì", "üòî", "üòï", "üôÉ", "ü§ë", "üò≤", "‚òπ", "üôÅ", "üòñ", "üòû",
                "üòü", "üò§", "üò¢", "üò≠", "üò¶", "üòß", "üò®", "üò©", "ü§Ø", "üò¨",
                "üò∞", "üò±", "üò≥", "ü§™", "üòµ", "üò°", "üò†", "ü§¨", "üò∑", "ü§í"
        };

        for (String emoji : emojis) {
            JButton emojiButton = new JButton(emoji);
            emojiButton.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 16));
            emojiButton.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
            emojiButton.setContentAreaFilled(false);
            emojiButton.addActionListener(e -> {
                String currentText = inputField.getText();
                int pos = inputField.getCaretPosition();
                inputField.setText(currentText.substring(0, pos) + emoji + currentText.substring(pos));
                inputField.setCaretPosition(pos + emoji.length());
            });
            emojiPanel.add(emojiButton);
        }

        emojiMenu.add(emojiPanel);

        // ‰øÆÊîπÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
        emojiButton.addActionListener(e -> {

            Dimension menuSize = emojiMenu.getPreferredSize();
            Point buttonLoc = emojiButton.getLocationOnScreen();
            int x = 0;
            int y = -menuSize.height;

            // Â¶ÇÊûú‰ºöË∂ÖÂá∫Â±èÂπï‰∏äÊñπÔºåÊîπ‰∏∫Âêë‰∏ãÂºπÂá∫
            if (buttonLoc.y - menuSize.height < 0) {
                y = emojiButton.getHeight();
            }

            emojiMenu.show(emojiButton, x, y);
        });
    }

    public void setChatWindowMessageListener(ChatMessageListener listener) {
        this.listener = listener;
        if (listener != null) {
            if (this.receiverId != -1) {
                listener.setInitData(senderId, receiverId);
            } else {
                listener.setGroupInitData(senderId, receiverName);
            }
            listener.getReceiverLoginStatus(receiverId);
            SwingUtilities.invokeLater(() -> {
                JScrollBar vertical = scrollPane.getVerticalScrollBar();
                vertical.setValue(vertical.getMaximum());
            });
        }
    }

    public void setReceiverNameLabel(String receiverName) {
        receiverNameLabel.setText(receiverName);
    }

    public void setStatusLabel(String status) {
        statusLabel.setText(status);
        if (status.equals("Âú®Á∫ø")) statusLabel.setForeground(Color.GREEN);
        else statusLabel.setForeground(Color.RED);
    }

    public void addMessage(Message content) {
        //System.out.println("adding message: "+content.getContent());
        MessagePanel messagePanel = new MessagePanel(
                Objects.equals(senderId, content.getSenderID()) ? senderAvatar : receiverAvatar,
                content,
                senderId
        );

        chatPanel.add(messagePanel);
        chatPanel.add(Box.createVerticalGlue());

        // Êõ¥Êñ∞UI
        chatPanel.revalidate();
        chatPanel.repaint();

        // ÊªöÂä®Âà∞Â∫ïÈÉ®
        SwingUtilities.invokeLater(() -> {
            JScrollBar vertical = scrollPane.getVerticalScrollBar();
            vertical.setValue(vertical.getMaximum());
        });
    }


    public void setAvatar(BufferedImage senderAvatar, BufferedImage receiverAvatar) {
        this.senderAvatar = senderAvatar;
        this.receiverAvatar = receiverAvatar;
    }

    private boolean isImage(File file) {
        String fileName = file.getName();
        String extension = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();
        return extension.equals("jpg") || extension.equals("jpeg") || extension.equals("png") || extension.equals("gif");
    }

    private boolean isVideo(File file) {
        String fileName = file.getName();
        String extension = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();
        return extension.equals("mp4") || extension.equals("avi") || extension.equals("mov");
    }

    private void addListener() {

        //ÂèëÈÄÅÊ∂àÊÅØÊåâÈíÆÁõëÂê¨Âô®
        if (receiverId != -1) {
            sendButton.addActionListener(e -> sendMessage());
        } else {
            sendButton.addActionListener(e ->sendGroupMessage());
        }

        // Ë°®ÊÉÖÊåâÈíÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
        emojiButton.addActionListener(e -> {
            emojiMenu.show(emojiButton, 0, emojiButton.getHeight());
        });

        // ËæìÂÖ•Ê°Ü Enter ÈîÆÁõëÂê¨Âô®
        inputField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER){
                    if(receiverId!=-1) sendMessage();
                    else sendGroupMessage();
                }
            }
        });

        // Êñá‰ª∂/ÂõæÁâá/ËßÜÈ¢ëÂèëÈÄÅÊåâÈíÆÁöÑ‰∫ã‰ª∂ÁõëÂê¨Âô®
        fileButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                if (file != null) {
                    if (isImage(file)) {
                        try {
                            byte[] fileImage = imageFileToByteArray(file);

                            if(this.receiverId!=-1) {
                                SingleChatMessage message = new SingleChatMessage(
                                        LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd hh:mm:ss")),
                                        SingleChatMessage.SENDING, senderId, receiverId, "image", fileImage);
                                addMessage(message);
                                listener.sendMessage(message);
                            }else{
                                System.out.println("ÂáÜÂ§áÂèëÂõæÁâáÊñá‰ª∂‰∫ÜÂó∑");
                                GroupChatMessage message = new GroupChatMessage(
                                        LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd hh:mm:ss")),
                                        GroupChatMessage.SENDING, this.senderId, this.receiverName, "image", fileImage);

                                addMessage(message);
                                listener.sendGroupMessage(message);
                            }
                        } catch (IOException ex) {
                            throw new RuntimeException(ex);
                        }

                    } else if (isVideo(file)) {
                        //        addMessage(new VideoMessageContent(file), true);
                    } else {
                        //        addMessage(new FileMessageContent(file), true);
                    }
                }
            }
        });
    }



    public static byte[] imageFileToByteArray(File file) throws IOException {
        BufferedImage image = ImageIO.read(file);
        if (image == null) {
            return null;
        }
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        // ÂÅáËÆæÂõæÂÉèÊ†ºÂºè‰∏∫ PNGÔºå‰Ω†ÂèØ‰ª•Ê†πÊçÆÂÆûÈôÖÊÉÖÂÜµ‰øÆÊîπ
        ImageIO.write(image, "png", baos);
        return baos.toByteArray();
    }

    //ÂèëÈÄÅÊ∂àÊÅØÈÄªËæëÔºåÊñ∞Â¢ûÊú¨Âú∞Ëä±Â≠òÂÇ®
    private void sendMessage() {
        if (listener != null) {
            SingleChatMessage singleChatMessage =
                    new SingleChatMessage(
                            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd hh:mm:ss")),
                            SingleChatMessage.SENDING, senderId, receiverId, "text", inputField.getText()
                    );
            addMessage(singleChatMessage);
            inputField.setText("");
            listener.sendMessage(singleChatMessage);
        }
    }
    //ÂèëÈÄÅÁæ§Ê∂àÊÅØ
    private void sendGroupMessage() {
        if (listener != null) {
            GroupChatMessage groupChatMessage =
                    new GroupChatMessage(
                            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd hh:mm:ss")),
                            SingleChatMessage.SENDING, senderId, receiverName, "text", inputField.getText()
                    );
            addMessage(groupChatMessage);
            inputField.setText("");
            listener.sendGroupMessage(groupChatMessage);
        }
    }


    public void moveToBottom() {
        SwingUtilities.invokeLater(() -> {
            JScrollBar vertical = scrollPane.getVerticalScrollBar();
            vertical.setValue(vertical.getMaximum());
        });
    }

    public interface ChatMessageListener {
        void setInitData(Integer senderId, Integer receiverId);

        void setGroupInitData(Integer senderId, String receiverName);

        void sendMessage(SingleChatMessage content);

        void sendGroupMessage(GroupChatMessage content);
        void flushLoginStatus(Integer receiverId);

        void getReceiverLoginStatus(Integer receiverId);
    }

    @Override
    public void setVisible(boolean aFlag) {
        super.setVisible(aFlag);
        if (aFlag && listener != null) {
            listener.flushLoginStatus(receiverId);
        }
    }
}
